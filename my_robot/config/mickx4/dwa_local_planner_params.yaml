# ns : DWAPlannerROS

##################################
#
#  Robot Configuration Parameters
#
##################################

# The x acceleration limit of the robot in meters/sec^2 (double, default: 2.5)
acc_lim_x: 3.0

# The y acceleration limit of the robot in meters/sec^2 (double, default: 2.5)
acc_lim_y: 0.0

# The rotational acceleration limit of the robot in radians/sec^2 (double, default: 3.2)
acc_lim_theta: 3.0

# The absolute value of the maximum translational velocity for the robot in m/s (double, default: 0.55)
max_trans_vel: 0.5

# The absolute value of the minimum translational velocity for the robot in m/s (double, default: 0.1)
min_trans_vel: 0.1

# The maximum x velocity for the robot in m/s. (double, default: 0.55)
max_vel_x: 0.5

# The minimum x velocity for the robot in m/s, negative for backwards motion. (double, default: 0.0)
min_vel_x: 0.0

# The maximum y velocity for the robot in m/s (double, default: 0.1)
max_vel_y: 0.0

# The minimum y velocity for the robot in m/s (double, default: -0.1)
min_vel_y: 0.0

# The absolute value of the maximum rotational velocity for the robot in rad/s (double, default: 1.0)
max_rot_vel: 0.4

# The absolute value of the minimum rotational velocity for the robot in rad/s (double, default: 0.4)
min_rot_vel: 0.0

rot_stopped_vel: 0.1
trans_stopped_vel: 0.1
##################################
#
#  Goal Tolerance Parameters
#
##################################

# The tolerance in radians for the controller in yaw/rotation when achieving its goal (double, default: 0.05)
yaw_goal_tolerance: 0.08

# The tolerance in meters for the controller in the x & y distance when achieving a goal (double, default: 0.10)
xy_goal_tolerance: 0.2

# If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so. (bool, default: false)
latch_xy_goal_tolerance: false

##################################
#
#  Forward Simulation Parameters
#
##################################

# The amount of time to forward-simulate trajectories in seconds (double, default: 1.7)
sim_time: 1.0

# The step size, in meters, to take between points on a given trajectory (double, default: 0.025)
sim_granularity: 0.03
angular_sim_granularity: 0.1

# The number of samples to use when exploring the x velocity space (integer, default: 3)
vx_samples: 6

# The number of samples to use when exploring the y velocity space (integer, default: 10)
vy_samples: 6

# The number of samples to use when exploring the theta velocity space (integer, default: 20)
vtheta_samples: 5

# The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset. (double, default: 20.0)
#controller_frequency: 20

##################################
#
#   Trajectory Scoring Parameters
#
# cost =  pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
#  +      gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
#  +      occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
#
##################################

# The weighting for how much the controller should stay close to the path it was given (double, default: 32.0)
path_distance_bias: 64.0

# The weighting for how much the controller should attempt to reach its local goal, also controls speed (double, default: 24.0)
goal_distance_bias: 24.0

# The weighting for how much the controller should attempt to avoid obstacles (double, default: 0.01)
occdist_scale: 0.5

# The distance from the center point of the robot to place an additional scoring point, in meters (double, default: 0.325)
forward_point_distance: 0.2

# The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds (double, default: 0.2)
stop_time_buffer: 0.2

# The absolute value of the velocity at which to start scaling the robot's footprint, in m/s (double, default: 0.25)
scaling_speed: 0.25

# The maximum factor to scale the robot's footprint by (double, default: 0.2)
max_scaling_factor: 0.2

#################################
#
# RotateFirtCostFunction
#
#################################

# mininum angle robot to path and maximux distance from robot to path begin to make the function work
angle_threshold: 2.0
dist_threshold: 0.2

# maximum x direction velocity, this function mainly for rotate robot to path direction, so we have to limit x velocity
max_xv: 0.07

# cost factor for score, the higher it is, the bigger effect it has
cost_factor: 10.0

# little bias to defend zero overflow
thetav_bias: 0.2

##################################
#
#  Oscillation Prevention Parameters
#
##################################

# How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
oscillation_reset_dist: 0.05


##################################
#
#      Global Plan Parameters
#
##################################

# Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them. (bool, default: true)
prune_plan: true

##################################
#
# Rivz Display Parameters for Debug
#
##################################

# publish dwa cost grid point cloud
publish_cost_grid_pc: true

# publish dwa trajectory point cloud
publish_traj_pc: true
